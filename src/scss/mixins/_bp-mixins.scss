@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "config";

// Ascending evaluate grid breakpoints.
@mixin assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;

  @each $key, $num in $map {
    @if $prev-num == null {
      // Do nothing
    } @else if not math.compatible($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

@include assert-ascending(config.$breakpoints, "$breakpoints");

// ensures the min-width of the lowest breakpoint starts at 0.
@mixin _assert-starts-at-zero($map) {
  $values: map.values($map);
  $first-value: list.nth($values, 1);

  @if $first-value != 0 {
    @warn "First breakpoint in `$breakpoints` must start at 0, but starts at #{$first-value}.";
  }
}

@include _assert-starts-at-zero(config.$breakpoints);

@function breakpoint-next($name, $grid-breakpoints: config.$breakpoints, $breakpoint-names: map.keys($grid-breakpoints)) {
  $n: list.index($breakpoint-names, $name);

  @return if($n < list.length($breakpoint-names), list.nth($breakpoint-names, $n + 1), null);
}

@function breakpoint-min($name, $grid-breakpoints: config.$breakpoints) {
  $min: map.get($grid-breakpoints, $name);

  @return if($min != 0, $min, null);
}

@function breakpoint-max($name, $grid-breakpoints: config.$breakpoints) {
  $next: breakpoint-next($name, $grid-breakpoints);

  @return if($next, breakpoint-min($next, $grid-breakpoints) - 1px, null);
}

@function breakpoint-infix($name, $grid-breakpoints: config.$breakpoints) {
  @return if(breakpoint-min($name, $grid-breakpoints) == null, "", "-#{$name}");
}

// Media breakpoint up is min-width up
@mixin media-breakpoint-up($name, $grid-breakpoints: config.$breakpoints) {
  $min: breakpoint-min($name, $grid-breakpoints);

  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}
